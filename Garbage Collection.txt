How can an object be unreferenced?

There are many ways:

1. By nulling the reference
Student s=new Student();  
s=null;  

2. By assigning a reference to another
Student s1=new Student();  
Student s2=new Student();  
s1=s2;//now the first object referred by s1 is available for garbage collection  

3. By anonymous object etc.
Example-
new Student();
------------------------------------------------------

Ways for requesting JVM to run Garbage Collector-
-----------------------------------------------------------------------
Once we make an object eligible for garbage collection, it may not destroy immediately by the 
garbage collector. Whenever JVM runs the Garbage Collector program, then only the object will be destroyed. But when JVM runs Garbage Collector, we can not expect.


We can also request JVM to run Garbage Collector. There are two ways to do it : 
-------------------------------------------------------------------------------------------------------------
1. Using System.gc() method: System class contain static method gc() for requesting JVM to run Garbage Collector.

2. Using Runtime.getRuntime().gc() method: Runtime class allows the application to interface with the JVM in which the application is running. Hence by using its gc() method, we can request JVM to run Garbage Collector.

Note: 
1.There is no guarantee that any of the above two methods will run Garbage Collector.

2. The call System.gc() is effectively equivalent to the call : Runtime.getRuntime().gc()

---------------------------------------------------------

finalize()  method-
--------------------------
Just before destroying an object, Garbage Collector calls finalize() method on the object to perform 
cleanup activities. 
Once finalize() method completes, Garbage Collector destroys that object.
finalize() method is present in "Object" class with the following prototype.

protected void finalize() throws Throwable
{
}

Based on our requirement, we can override finalize() method for performing our cleanup activities 
like closing connection from the database. 

Note: The finalize() method is called by Garbage Collector, not JVM. However, Garbage Collector is one of the modules of JVM.

Object class finalize() method has an empty implementation. Thus, it is recommended to override the finalize() method to dispose of system resources or perform other cleanups.
The finalize() method is never invoked more than once for any object.

If an uncaught exception is thrown by the finalize() method, the exception is ignored, and the finalization of that object terminates.
----------------------------------------------------------------------------------------------------------------------------------

Advantages of Garbage Collection in Java-
-----------------------------------------------------------
The advantages of Garbage Collection in Java are:

It makes java memory-efficient because the garbage collector removes the unreferenced objects from 
heap memory.

It is automatically done by the garbage collector(a part of JVM), so we don’t need extra effort.
-----------------------------------------------------------------------
Example:

class X
{
X()
{
System.out.println("Object Created");
}
protected void finalize() throws Throwable
{
System.out.println("Object Destroyed");
}

public static void main(String args[])
{

X d1=new X();
d1=null;

X d2=new X();
X d3=new X();
d2=d3; 

new X(); //ananymous object
System.gc(); // or Runtime.getRuntime().gc();
}
}
Output:
Object Created
Object Created
Object Created
Object Created
Object Destroyed
Object Destroyed
Object Destroyed

Note: There is no guarantee that gc() will run Garbage Collector. It may either run/not run or interrupted in-between. 